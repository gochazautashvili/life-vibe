generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String  @id
  username     String  @unique
  displayName  String
  email        String? @unique
  passwordHash String?
  googleId     String? @unique
  avatarUrl    String?
  bio          String?

  sessions              Session[]
  posts                 Post[]
  following             Follow[]       @relation("Following")
  followers             Follow[]       @relation("Followers")
  likes                 Like[]
  bookmarks             Bookmark[]
  comments              Comment[]
  receivedNotifications Notification[] @relation("Recipient")
  issuedNotifications   Notification[] @relation("Issuer")

  createdAt DateTime @default(now())

  @@map("users")
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?

  @@map("sessions")
}

model Follow {
  followerId String
  follower   User   @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)

  followingId String
  following   User   @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Post {
  id      String @id @default(cuid())
  content String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  attachments        Media[]
  likes              Like[]
  bookmarks          Bookmark[]
  comments           Comment[]
  linkedNotification Notification[]

  createdAt DateTime @default(now())

  @@map("posts")
}

model Media {
  id String @id @default(cuid())

  post   Post?   @relation(fields: [postId], references: [id], onDelete: SetNull)
  postId String?

  type MediaType
  url  String

  createdAt DateTime @default(now())

  @@map("media")
}

model Comment {
  id String @id @default(cuid())

  content String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  createdAt DateTime @default(now())

  @@map("comments")
}

model Like {
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([postId, userId])
  @@map("likes")
}

model Bookmark {
  id String @id @default(cuid())

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())

  @@unique([postId, userId])
  @@map("Bookmarks")
}

enum MediaType {
  IMAGE
  VIDEO
}

model Notification {
  id          String @id @default(cuid())
  recipient   User   @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  recipientId String

  issuer   User   @relation("Issuer", fields: [issuerId], references: [id], onDelete: Cascade)
  issuerId String

  postId String?
  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)

  type NotificationType
  read Boolean          @default(false)

  createdAt DateTime @default(now())

  @@map("notifications")
}

enum NotificationType {
  LIKE
  FOLLOW
  COMMENT
}
